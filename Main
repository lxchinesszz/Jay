import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.alibaba.fastjson.JSONObject;

import lombok.Data;

/**
 * @author liuxin 2022/6/25 21:25
 */
public class Main {

    // 转接
    @Data
    public static class Album {
        private String name;
        private List<Song> songs;

        public Album(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public List<Song> getSongs() {
            return songs;
        }

        public void setSongs(List<Song> songs) {
            this.songs = songs;
        }
    }


    // 歌曲

    public static class Song {
        
        private String name;
        private List<String> songLrc;

        public Song(String name,List<String> songLrc) {
            this.songLrc = songLrc;
            this.name = name;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public List<String> getSongLrc() {
            return songLrc;
        }

        public void setSongLrc(List<String> songLrc) {
            this.songLrc = songLrc;
        }
    }

    public static void main(String[] args) throws Exception {
        List<Album> albums = new ArrayList<>();
        Path path = Paths.get("/Users/liuxin/Github/周杰伦/zhoujielun");
        File file = path.toFile();
        List<String> ignoreFileName = Arrays.asList(".git", "README.md");
        File[] files = file.listFiles();
        for (File f : files) {
            String dirFileName = f.getName();
            File[] lrcFiles = f.listFiles((dir, name) -> name.endsWith(".lrc"));
            if (!ignoreFileName.contains(dirFileName)) {
                if (Objects.nonNull(lrcFiles)) {
                    Album album = new Album(dirFileName);
                    List<Song> songs = new ArrayList<>();
                    for (File lrcFile : lrcFiles) {
                        List<String> list = parse(lrcFile);
                        songs.add(new Song(list.get(0),list));
                    }
                    album.setName(dirFileName);
                    album.setSongs(songs);
                    albums.add(album);
                }
            }
        }
        System.out.println(JSONObject.toJSONString(albums));
        // String path = "/Users/liuxin/Github/周杰伦/zhoujielun/七里香/周杰伦 - 搁浅.lrc"; // 歌词文件路径
        // printLrc(list);
    }

    /**
     * 解析LRC歌词文件
     *
     * lrc文件路径
     * 
     * @return
     */
    public static List<String> parse(File file) {
        // 存储所有歌词信息的容器
        List<String> list = new ArrayList<String>();
        try {
            // String encoding = "utf-8"; // 字符编码，若与歌词文件编码不符将会出现乱码
            String encoding = "GBK";
            if (file.isFile() && file.exists()) { // 判断文件是否存在
                InputStreamReader read = new InputStreamReader(new FileInputStream(file), encoding);
                BufferedReader bufferedReader = new BufferedReader(read);
                String regex = "[\\u4e00-\\u9fa5]+"; // 正则表达式
                Pattern pattern = Pattern.compile(regex); // 创建 Pattern 对象
                String lineStr = null; // 每次读取一行字符串
                while ((lineStr = bufferedReader.readLine()) != null) {
                    Matcher matcher = pattern.matcher(lineStr);
                    if (matcher.find()) {
                        String group = matcher.group();
                        list.add(group);
                    }
                }
                read.close();
                return list;
            } else {
            }
        } catch (Exception e) {
            System.out.println("读取文件出错!");
            e.printStackTrace();
        }
        return null;
    }

    /**
     * 将以字符串形式给定的分钟、秒钟、毫秒转换成一个以毫秒为单位的long型数
     *
     * @param min
     *            分钟
     * @param sec
     *            秒钟
     * @param mill
     *            毫秒
     * @return
     */
    private static long getLongTime(String min, String sec, String mill) {
        // 转成整型
        int m = Integer.parseInt(min);
        int s = Integer.parseInt(sec);
        int ms = Integer.parseInt(mill);

        if (s >= 60) {
            System.out.println("警告: 出现了一个时间不正确的项 --> [" + min + ":" + sec + "." + mill.substring(0, 2) + "]");
        }
        // 组合成一个长整型表示的以毫秒为单位的时间
        long time = m * 60 * 1000 + s * 1000 + ms;
        return time;
    }

    /**
     * 打印歌词信息
     */
    public static void printLrc(List<String> list) {
        for (String s : list) {
            System.out.println(s);
        }
    }
}
